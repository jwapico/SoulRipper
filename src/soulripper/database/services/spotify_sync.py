import logging
from typing import Optional

import sqlalchemy
import sqlalchemy.orm

from soulripper.spotify import SpotifyClient
from ..schemas import TrackData
from ..models import Playlists
from ..repositories import PlaylistsRepository

logger = logging.getLogger(__name__)

def update_db_with_spotify_playlist(sql_session: sqlalchemy.orm.Session, spotify_client: SpotifyClient, spotify_playlist_metadata: dict) -> None:
    logger.info(f"Updating database with tracks from playlist {spotify_playlist_metadata['name']}...")

    # get the TrackData for the playlist
    playlist_tracks = spotify_client.get_playlist_tracks(spotify_playlist_metadata['id'])
    relevant_tracks_data: list[TrackData] = spotify_client.get_track_data_from_playlist(playlist_tracks)

    # create the playlist row
    playlist_row = PlaylistsRepository.add_playlist(sql_session, spotify_playlist_metadata['id'], spotify_playlist_metadata['name'], spotify_playlist_metadata['description'])

    # add the track data to the playlist and commit
    PlaylistsRepository.add_track_data_to_playlist(sql_session, relevant_tracks_data, playlist_row)
    sql_session.commit()

# TODO: this function takes a while to run, we should find a way to check if there any changes before calling it
def update_db_with_spotify_liked_tracks(spotify_client: SpotifyClient, sql_session: sqlalchemy.orm.Session) -> Optional[Playlists]:
    # get the TrackData for the users liked tracks
    liked_tracks_data = spotify_client.get_liked_tracks()
    relevant_tracks_data: list[TrackData] = spotify_client.get_track_data_from_playlist(liked_tracks_data)

    # create the playlist row
    liked_playlist_row = PlaylistsRepository.add_playlist(sql_session, spotify_id=None, name="SPOTIFY_LIKED_SONGS", description="User liked songs on Spotify - This playlist is generated by SoulRipper")

    # add each track in the users liked songs to the database if it doesn't already exist
    PlaylistsRepository.add_track_data_to_playlist(sql_session, relevant_tracks_data, liked_playlist_row)

    # commit and return the row
    sql_session.commit()
    return liked_playlist_row