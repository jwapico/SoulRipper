from database.schemas.track import TrackData
from database.models.playlists import Playlists
from database.crud.playlist_crud import add_track_data_to_playlist
import database.crud.playlist_crud
from spotify.client import SpotifyClient

def update_db_with_spotify_playlist(sql_session, spotify_client: SpotifyClient, playlist_metadata):
    print(f"Updating database with tracks from playlist {playlist_metadata['name']}...")

    playlist_tracks = spotify_client.get_playlist_tracks(playlist_metadata['id'])
    relevant_tracks_data: list[TrackData] = spotify_client.get_track_data_from_playlist(playlist_tracks)

    # create and flush the playlist since we need its id for the playlist_tracks association table
    playlist_row = sql_session.query(Playlists).filter_by(spotify_id=playlist_metadata['id']).first()
    if playlist_row is None:
        playlist_row = database.crud.playlist_crud.add_playlist(sql_session, playlist_metadata['id'], playlist_metadata['name'], playlist_metadata['description'])
        sql_session.add(playlist_row)
        sql_session.flush()

    # add each track in the playlist to the database if it doesn't already exist
    # for track_data in relevant_tracks_data:
    add_track_data_to_playlist(sql_session, relevant_tracks_data, playlist_row)
    sql_session.commit()

# TODO: this function takes a while to run, we should find a way to check if there any changes before calling it
def update_db_with_spotify_liked_tracks(spotify_client, sql_session):
    liked_tracks_data = spotify_client.get_liked_tracks()
    relevant_tracks_data: list[TrackData] = spotify_client.get_track_data_from_playlist(liked_tracks_data)

    liked_playlist = sql_session.query(Playlists).filter_by(name="SPOTIFY_LIKED_SONGS").first()
    if liked_playlist is None:
        liked_playlist = database.crud.playlist_crud.add_playlist(sql_session, spotify_id=None, name="SPOTIFY_LIKED_SONGS", description="User liked songs on Spotify - This playlist is generated by SoulRipper")
        sql_session.add(liked_playlist)
        sql_session.flush()

    # add each track in the users liked songs to the database if it doesn't already exist
    add_track_data_to_playlist(sql_session, relevant_tracks_data, liked_playlist)

    sql_session.commit()
    return liked_playlist